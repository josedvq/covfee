"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=o.createContext({}),s=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=s(e.components);return o.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,f=d["".concat(p,".").concat(m)]||d[m]||u[m]||i;return n?o.createElement(f,a(a({ref:t},c),{},{components:n})):o.createElement(f,a({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:r,a[1]=l;for(var s=2;s<i;s++)a[s]=n[s];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7306:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var o=n(7462),r=(n(7294),n(3905));const i={title:"Deploying to a server"},a=void 0,l={unversionedId:"deployment",id:"deployment",title:"Deploying to a server",description:"Deploying covfee is necessary when you want to make your HITs available to others over the internet.",source:"@site/docs/deployment.mdx",sourceDirName:".",slug:"/deployment",permalink:"/covfee/docs/deployment",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/deployment.mdx",tags:[],version:"current",frontMatter:{title:"Deploying to a server"},sidebar:"docs",previous:{title:"Reading the output",permalink:"/covfee/docs/output"},next:{title:"Development install",permalink:"/covfee/docs/development"}},p=[{value:"1. Deployment configuration",id:"1-deployment-configuration",children:[{value:"Basic configuration",id:"basic-configuration",children:[],level:3},{value:"Hosting media files externally",id:"hosting-media-files-externally",children:[],level:3}],level:2},{value:"2. Deployment Installation",id:"2-deployment-installation",children:[],level:2},{value:"3. Starting the server",id:"3-starting-the-server",children:[{value:"Embedded server",id:"embedded-server",children:[],level:3},{value:"gunicorn",id:"gunicorn",children:[],level:3},{value:"Apache mod_wsgi",id:"apache-mod_wsgi",children:[],level:3},{value:"More deployment options",id:"more-deployment-options",children:[],level:3}],level:2},{value:"Restarting covfee",id:"restarting-covfee",children:[],level:2}],s={toc:p};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Deploying covfee is necessary when you want to make your HITs available to others over the internet."),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"If you are developing new task interfaces in Typescript it is more convenient to create your HIT specifications locally, deploy covfee, and then run ",(0,r.kt)("inlineCode",{parentName:"p"},"covfee make")," on the deployed instance to initialize your database."))),(0,r.kt)("h2",{id:"1-deployment-configuration"},"1. Deployment configuration"),(0,r.kt)("p",null,"covfee reads its configuration from the folder in which it is run (ie. the project folder). When ran in deployment mode, covfee will look for the file ",(0,r.kt)("inlineCode",{parentName:"p"},"covfee.deployment.config.py")," for its configuration."),(0,r.kt)("h3",{id:"basic-configuration"},"Basic configuration"),(0,r.kt)("p",null,"If you are deploying covfee in a typical server, add a configuration file like the following to your project folder:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'BASE_URL = "http://my-domain.com:5000"\n\nCOVFEE_SECRET_KEY = "MY_SECRET"\nADMIN_USERNAME = "admin"\nADMIN_PASSWORD = "admin"\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"BASE_URL")," option should point to the address where you plan to serve covfee."),(0,r.kt)("p",null,"The username and password will be used by covfee to authenticate users of the admin panel. It is therefore important to set them to something secure."),(0,r.kt)("h3",{id:"hosting-media-files-externally"},"Hosting media files externally"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"MEDIA_URL")," option allows you to customize the location of your media files. By default, covfee will serve media files from a folder called ",(0,r.kt)("inlineCode",{parentName:"p"},"www")," in your project folder. Anything in this folder will be made public. If you want to host your media files externally, you can disable this behavior by setting ",(0,r.kt)("inlineCode",{parentName:"p"},"MEDIA_SERVER")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"False")," and pointing ",(0,r.kt)("inlineCode",{parentName:"p"},"MEDIA_URL")," to your files' location:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"MEDIA_URL = 'http://example.com/covfee-media'\nMEDIA_SERVER = False\n")),(0,r.kt)("h2",{id:"2-deployment-installation"},"2. Deployment Installation"),(0,r.kt)("p",null,"Start by installing covfee in the server. If you are using a development version / fork follow the ",(0,r.kt)("em",{parentName:"p"},"Setup")," section of the ","[Development instructions]"," to install covfee in the server."),(0,r.kt)("p",null,"Next, build the schemata and bundles:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"covfee-dev schemata\ncovfee-dev build\n")),(0,r.kt)("p",null,"The second step here builds the production bundles (",(0,r.kt)("em",{parentName:"p"},"compiled")," Javascript) that is served in production. Errors here might indicate problems with your custom task."),(0,r.kt)("p",null,"Now run ",(0,r.kt)("strong",{parentName:"p"},"covfee make")," in the server:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"covfee make tutorial.py --no-launch --deploy\n")),(0,r.kt)("p",null,"This will initialize the database for deployment without starting the server."),(0,r.kt)("h2",{id:"3-starting-the-server"},"3. Starting the server"),(0,r.kt)("p",null,"There are several options for starting covfee in deployment. ",(0,r.kt)("strong",{parentName:"p"},"In the server too, it is important covfee is started from the project folder.")),(0,r.kt)("h3",{id:"embedded-server"},"Embedded server"),(0,r.kt)("p",null,"Here we use the production-ready embedded server from ",(0,r.kt)("a",{parentName:"p",href:"https://flask-socketio.readthedocs.io/en/latest/deployment.html"},"flask-socketio")," to start covfee. To run the server you may use:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"covfee start --host 0.0.0.0 --port 80 --deploy\n")),(0,r.kt)("p",null,"This will serve covfee in deployment mode using the specified host and port."),(0,r.kt)("h3",{id:"gunicorn"},"gunicorn"),(0,r.kt)("p",null,"gunicorn is the most common deployment option for Flask applications. To run covfee using gunicorn:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"gunicorn --worker-class eventlet -w 4 'covfee.server.app:create_app()' --bind 0.0.0.0:5000\n")),(0,r.kt)("h3",{id:"apache-mod_wsgi"},"Apache mod_wsgi"),(0,r.kt)("p",null,"covfee can be run under Apache by using ",(0,r.kt)("a",{parentName:"p",href:"https://modwsgi.readthedocs.io/en/master/"},"mod_wsgi"),". This option can be more involved and is only recommended for advanced users."),(0,r.kt)("p",null,"First, ",(0,r.kt)("inlineCode",{parentName:"p"},"mod_wsgi")," must be installed for Python 3:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"sudo apt-get install libapache2-mod-wsgi-py3\n")),(0,r.kt)("p",null,"Next, add a file ",(0,r.kt)("inlineCode",{parentName:"p"},"covfee.wsgi")," with the following to your project directory:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"import sys\nimport os\nsys.stdout = sys.stderr\nactivate_this = '/path/to/virtualenv/bin/activate_this.py'\nwith open(activate_this) as file_:\n    exec(file_.read(), dict(__file__=activate_this))\nos.chdir('/path/to/covfee-project')\nfrom covfee.server.app import create_app\napplication = create_app()\n")),(0,r.kt)("p",null,"This code will allow Apache to create your app instance. ",(0,r.kt)("inlineCode",{parentName:"p"},"/path/to/virtualenv")," is the path to your virtual environment where covfee is installed."),(0,r.kt)("p",null,"Finally, Apache must know about your site. For this add lines like the following to your apache site configuration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"WSGIDaemonProcess covfee user=me group=me threads=3\nWSGIProcessGroup covfee\nWSGIScriptAlias /covfee /path/to/covfee-project/covfee.wsgi\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"WSGIScriptAlias")," must point to the ",(0,r.kt)("inlineCode",{parentName:"p"},"covfee.wsgi")," file you created in the previous step. The first parameter ",(0,r.kt)("inlineCode",{parentName:"p"},"/covfee")," is the url path under which covfee will be accesible."),(0,r.kt)("h3",{id:"more-deployment-options"},"More deployment options"),(0,r.kt)("p",null,"Covfee is built with Flask and is therefore easy to deploy using any of the options supported by Flask. Take a look at the ",(0,r.kt)("a",{parentName:"p",href:"https://flask.palletsprojects.com/en/1.1.x/deploying/"},"Flask deployment options")," for more."),(0,r.kt)("h2",{id:"restarting-covfee"},"Restarting covfee"),(0,r.kt)("p",null,"Covfee can be safely stopped and started using any of the approaches above. Beware of the use of ",(0,r.kt)("inlineCode",{parentName:"p"},"covfee make")," in production, as the ",(0,r.kt)("inlineCode",{parentName:"p"},"--force")," option will overwrite the entire database, potentially causing data loss.\nIn its current form covfee does not allow modification of the task specification once it has been moved to production. HITs can be duplicated using the admin panel to collect more data or deal with failed HITs, but the specification of a HIT cannot be changed without re-creating the database."))}c.isMDXComponent=!0}}]);